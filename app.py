import requests
from flask import Flask, render_template, Response, send_file, request
from functools import lru_cache
import os
import re
import subprocess
from io import BytesIO
from weasyprint import HTML
from datetime import datetime

# Executa o extrator em segundo plano
process = subprocess.Popen(
    ["python3", "static/text/extrator_links.py"],
    stdout=subprocess.DEVNULL,
    stderr=subprocess.DEVNULL
)
print("Extrator iniciado em segundo plano.")

app = Flask(__name__)

# Caminho para o arquivo de links
LINKS_FILE = os.path.join(app.static_folder, 'text', 'salmos_links.txt')

# === 1. Defina formatar_nome_salmo ANTES de carregar_salmos ===
def formatar_nome_salmo(filename):
    # Remove extens√£o
    nome = re.sub(r'\.(mp3|doc)$', '', filename, flags=re.IGNORECASE)
    # Remove '_playback'
    nome = re.sub(r'_playback$', '', nome, flags=re.IGNORECASE)
    # Normaliza m√∫ltiplos underscores
    nome = re.sub(r'_+', '_', nome).strip('_')

    # Casos especiais
    if 'dn_' in nome:
        return "Daniel 3"
    if 'isaias12' in nome or 'isa√≠as12' in nome:
        return "Respons√≥rio de Isa√≠as 12"
    if 'responsorio' in nome:
        return "Respons√≥rio"
    if 'vigilia' in nome or 'vigiliapascal' in nome:
        return "Vig√≠lia Pascal"

    # Padr√£o: salmo_X ou salmo_X_Y
    match = re.match(r'^salmo_(\d+)(?:_(\w+))?$', nome, re.IGNORECASE)
    if match:
        numero = match.group(1)
        sufixo = match.group(2) or ''
        if sufixo.isdigit():
            return f"Salmo {numero} ‚Äî Vers√£o {sufixo}"
        elif sufixo and re.match(r'^[a-d]$', sufixo, re.IGNORECASE):
            versao = ord(sufixo.lower()) - ord('a') + 1
            return f"Salmo {numero} ‚Äî Vers√£o {versao}"
        else:
            return f"Salmo {numero}"
    return nome.replace('_', ' ').title()

# === 2. Defina chave_ordenacao (opcional, pode ser inline) ===
def chave_ordenacao(salmo):
    nome = salmo['nome']
    
    # Ordem: Daniel 3 ‚Üí Isa√≠as 12 ‚Üí Vig√≠lia Pascal ‚Üí Salmos por n√∫mero
    if 'Daniel 3' in nome:
        return (1, 0, 0)
    if 'Isaias12' in nome or 'Isa√≠as 12' in nome or 'Respons√≥rio de Isa√≠as 12' in nome:
        return (2, 0, 0)
    if 'Vig√≠lia Pascal' in nome:
        return (3, 0, 0)
    
    # Extrai n√∫mero do salmo e vers√£o
    match = re.match(r'Salmo (\d+)(?:[ _\-]?(.+))?', nome)
    if match:
        numero = int(match.group(1))
        sufixo = match.group(2) or '0'
        versao_match = re.search(r'(\d+)', sufixo)
        versao = int(versao_match.group(1)) if versao_match else 0
        return (10, numero, versao)
    
    return (99, nome.lower())

# === 3. Agora defina carregar_salmos ===
def carregar_salmos():
    if not os.path.exists(LINKS_FILE):
        return []

    with open(LINKS_FILE, 'r', encoding='utf-8') as f:
        linhas = [linha.strip() for linha in f if linha.strip()]

    mp3_urls = []
    doc_urls = []
    secao = None

    for linha in linhas:
        if linha.startswith('## Links MP3:'):
            secao = 'mp3'
            continue
        elif linha.startswith('## Links DOC (Cifras):'):
            secao = 'doc'
            continue
        if secao == 'mp3' and linha.endswith('.mp3'):
            mp3_urls.append(linha)
        elif secao == 'doc' and linha.endswith('.doc'):
            doc_urls.append(linha)

    mp3_dict = {url.split('/')[-1]: url for url in mp3_urls}
    doc_dict = {url.split('/')[-1].replace('.doc', '.mp3'): url for url in doc_urls}

    salmos = []
    for filename, mp3_url in mp3_dict.items():
        doc_url = doc_dict.get(filename, "#")
        nome = filename.rsplit('.', 1)[0]  # mant√©m nome original
        salmos.append({
            'filename': filename,
            'nome': nome,
            'mp3_url': mp3_url,
            'doc_url': doc_url
        })

    # Ordena por nome (opcional)
    return sorted(salmos, key=lambda x: x['nome'])

# === 4. Carregue os salmos (depois de tudo definido) ===
SALMOS = carregar_salmos()

# === 5. Rotas do Flask ===
@app.route('/salmos')
def pagina_salmos():
    return render_template('salmos.html', salmos=SALMOS, ano=2025)

# üîä Rota: Stream do √°udio (sem expor URL)
@app.route('/play/<path:filename>')
def play_salmo(filename):
    from urllib.parse import unquote
    filename = unquote(filename)
    salmo = next((s for s in SALMOS if s['filename'] == filename), None)
    if not salmo:
        return "Salmos n√£o encontrado", 404
    def generate():
        with requests.get(salmo['mp3_url'], stream=True) as r:
            r.raise_for_status()
            for chunk in r.iter_content(1024):
                yield chunk
    return Response(generate(), mimetype="audio/mpeg")

# ‚¨áÔ∏è Rota: Download an√¥nimo (via wget em mem√≥ria)
@app.route('/download/mp3/<path:filename>')
def download_mp3(filename):
    from urllib.parse import unquote
    filename = unquote(filename)
    salmo = next((s for s in SALMOS if s['filename'] == filename), None)
    if not salmo:
        return "Salmos n√£o encontrado", 404
    

    def generate():
        process = subprocess.Popen(
            ['wget', '-q', '-O-', salmo['mp3_url']],
            stdout=subprocess.PIPE
        )
        for chunk in iter(lambda: process.stdout.read(1024), b""):
            yield chunk
        process.wait()

    return Response(
        generate(),
        mimetype='audio/mpeg',
        headers={'Content-Disposition': f'attachment; filename="{filename}"'}
    )


@app.route('/download/doc/<path:filename>')
def download_doc(filename):
    from urllib.parse import unquote
    filename = unquote(filename)
    doc_filename = filename.replace('.mp3', '.doc')
    salmo = next((s for s in SALMOS if s['filename'].replace('.mp3', '.doc') == doc_filename), None)
    if not salmo or salmo['doc_url'] == "#":
        return "Cifra n√£o dispon√≠vel", 404

    def generate():
        with requests.get(salmo['doc_url'], stream=True) as r:
            r.raise_for_status()
            for chunk in r.iter_content(chunk_size=1024):
                yield chunk

    return Response(
        generate(),
        mimetype='application/vnd.ms-word',
        headers={'Content-Disposition': f'attachment; filename="{doc_filename}"'}
    )


pecados = {
    "1. Amar a Deus sobre todas as coisas": [
        "Negligenciei minha ora√ß√£o di√°ria",
        "Tive d√∫vidas sobre a f√© e critiquei os ensinamentos da Igreja",
        "Senti des√¢nimo espiritual e me revoltei contra Deus",
        "Frequentei cultos ou pr√°ticas supersticiosas (ex: cartomantes, hor√≥scopos)",
        "Busquei minha pr√≥pria gl√≥ria em vez da vontade de Deus",
        "Fui orgulhoso, vaidoso ou apegado a elogios",
        "Apeguei-me excessivamente ao dinheiro e aos bens materiais",
        "Fui impaciente e pouco tolerante com os outros",
        "Fui indiferente diante do sofrimento alheio",
        "Faltou-me empatia e amor ao pr√≥ximo",
        "Levei outros ao pecado com meus conselhos, atitudes ou exemplos",
        "Ignorei oportunidades de praticar caridade"
    ],
    "2. N√£o tomar o nome de Deus em v√£o": [
        "Usei o nome de Deus ou dos santos de forma desrespeitosa",
        "Ridicularizei s√≠mbolos da f√© ou religiosos",
        "Fiz promessas sem inten√ß√£o de cumprir",
        "Fiz juramentos falsos ou desnecess√°rios",
        "Permiti ou ri quando outros zombaram da f√©",
        "Usei express√µes religiosas com banalidade ou em v√£o"
    ],
    "3. Guardar domingos e festas de guarda": [
        "Faltei √† missa dominical ou em dias santos sem necessidade grave",
        "Cheguei intencionalmente atrasado √† missa ou sa√≠ antes da b√™n√ß√£o final",
        "Comunguei estando em pecado mortal",
        "Deixei de me confessar ao menos uma vez ao ano",
        "N√£o jejuei ou n√£o fiz abstin√™ncia quando mandado pela Igreja",
        "Negligenciei a ajuda material √† Igreja",
        "Fui √† missa por obriga√ß√£o, sem esfor√ßo de viver a f√© no dia a dia"
    ],
    "4. Honrar pai e m√£e": [
        "Desobedeci e faltei com respeito aos meus pais ou superiores",
        "Negligenciei os cuidados com meus pais idosos ou doentes",
        "Maltratei meu c√¥njuge com palavras ou atitudes",
        "Dei mau exemplo aos meus filhos",
        "Permiti influ√™ncias negativas sobre meus filhos (TV, internet, amizades)",
        "Fui negligente na forma√ß√£o religiosa dos meus filhos",
        "Deixei de corrigir meus filhos por comodismo",
        "Fui ingrato com meus pais ou av√≥s"
    ],
    "5. N√£o matar": [
        "Alimentei √≥dio, rancor, inimizade ou desejo de vingan√ßa",
        "Recusei-me a perdoar",
        "Desejei a morte ou o mal a algu√©m (ou a mim mesmo)",
        "Apoiei ou pratiquei aborto, eutan√°sia ou outras pr√°ticas semelhantes",
        "Fui descuidado com minha sa√∫de (excesso de comida, drogas, bebida, sedentarismo)",
        "Assumi riscos desnecess√°rios √† minha vida (dire√ß√£o imprudente, v√≠cios)",
        "Dei esc√¢ndalo ou mau exemplo",
        "Proferi palavr√µes ou palavras agressivas contra os outros",
        "Feri emocionalmente algu√©m com minhas palavras ou atitudes",
        "Fui violento, mesmo verbalmente, com pessoas pr√≥ximas"
    ],
    "6. N√£o pecar contra a castidade": [
        "Consenti em pensamentos ou desejos impuros",
        "Me masturbei, assisti pornografia ou tive rela√ß√µes sexuais fora do casamento",
        "Fui infiel emocionalmente ou fisicamente",
        "Tive liberdades excessivas no namoro",
        "Usei roupas provocativas com m√° inten√ß√£o",
        "Participei de conversas ou fiz piadas imorais",
        "Consumi conte√∫do sexualizado (TV, filmes, redes sociais)",
        "Mantive amizades que me levaram ao pecado",
        "Fiz coment√°rios maliciosos sobre o corpo de outras pessoas",
        "Alimentei fantasias sexuais intencionalmente"
    ],
    "7. N√£o roubar": [
        "Roubei ou fui desonesto em contratos ou neg√≥cios",
        "Me apropriei de bens ou dinheiro indevidamente",
        "Deixei de pagar d√≠vidas justas ou sal√°rios devidos",
        "Desperdicei tempo no trabalho ou trabalhei com neglig√™ncia",
        "Fui viciado em jogos de azar",
        "Vivi acima dos meus meios",
        "Fui injusto ao cobrar ou receber valores excessivos",
        "Usei benef√≠cios ou ajudas indevidamente"
    ],
    "8. N√£o levantar falso testemunho": [
        "Menti habitualmente, mesmo sem prejudicar diretamente",
        "Caluniei, difamei ou exagerei defeitos dos outros",
        "Ouvi ou espalhei boatos",
        "Julguei mal ou condenei injustamente algu√©m",
        "Causei divis√£o entre pessoas por fofoca",
        "N√£o reparei a m√° reputa√ß√£o causada por mim",
        "Fui hip√≥crita ou dissimulado para parecer melhor"
    ],
    "9. N√£o desejar a mulher do pr√≥ximo": [
        "Alimentei desejos impuros por pessoas casadas ou consagradas",
        "Tive fantasias ou inten√ß√µes de infidelidade",
        "Assediei verbal ou fisicamente",
        "Flertei com pessoas comprometidas",
        "Tive curiosidade indevida sobre a intimidade de outras pessoas",
        "Usei o olhar de maneira impura ou desrespeitosa"
    ],
    "10. N√£o cobi√ßar as coisas alheias": [
        "Invejei os bens, o sucesso ou os talentos dos outros",
        "Desejei tomar ou imitar aquilo que pertence a outros",
        "Fiquei descontente com a minha vida por causa de compara√ß√µes",
        "Fui ambicioso em excesso, sem gratid√£o pelo que tenho",
        "Desejei viver a vida dos outros em vez de valorizar a minha"
    ],
    "Mandamentos da Igreja": [
        "Faltei √† Missa em festas de guarda",
        "N√£o me confessei ao menos uma vez por ano",
        "N√£o comunguei na P√°scoa",
        "Comunguei em pecado grave",
        "N√£o guardei jejum e abstin√™ncia nos tempos prescritos",
        "N√£o ajudei a Igreja materialmente",
        "Desprezei os sacramentos por comodismo ou frieza espiritual"
    ],
    "Pecados relacionados ao casamento e √† fam√≠lia": [
        "Fui negligente com meu c√¥njuge (no di√°logo, carinho ou aten√ß√£o)",
        "Fui violento f√≠sica ou verbalmente dentro do lar",
        "Desrespeitei meu c√¥njuge",
        "Guardei m√°goas e n√£o perdoei no matrim√¥nio",
        "Priorizei trabalho ou lazer em detrimento da fam√≠lia",
        "Recusei-me a ter filhos sem justa causa",
        "N√£o dei testemunho crist√£o dentro do lar",
        "Fui indiferente √† vida familiar ou √†s necessidades dos meus",
        "Usei palavras ofensivas ou humilhantes com meus familiares"
    ],
    "Pecados espirituais e morais": [
        "Fui pregui√ßoso espiritualmente (n√£o busquei crescer na f√©)",
        "Me desinteressei pelas coisas de Deus",
        "Fui indiferente no zelo apost√≥lico (n√£o evangelizei, nem ajudei outros na f√©)",
        "Fui conivente com o pecado, meu ou alheio",
        "Busquei o sucesso pessoal acima da vontade divina",
        "Agi por ego√≠smo, pensando apenas em mim",
        "Fui omisso diante de injusti√ßas ou sofrimentos ao meu redor"
    ],
        "Pecados veniais (faltas leves que enfraquecem minha alma, mas n√£o rompem a amizade com Deus)": [
        "Falei palavras impacientes, com leve irrita√ß√£o ou impolidez",
        "Fui negligente em atos de caridade com os mais pr√≥ximos",
        "Fiz piadas ou coment√°rios inapropriados, sem inten√ß√£o grave",
        "Julguei os outros interiormente, mesmo sem espalhar cr√≠ticas",
        "Tive distra√ß√µes volunt√°rias durante a ora√ß√£o, sem esfor√ßo para me recolher",
        "Faltei com pequenas responsabilidades no trabalho ou estudo por descuido",
        "Deixei de ajudar algu√©m por comodismo, ainda que pudesse faz√™-lo",
        "Busquei meu conforto ou prazer em coisas pequenas, sem modera√ß√£o",
        "Fui impaciente com pessoas mais lentas ou com ideias diferentes das minhas",
        "Usei meu tempo de forma ego√≠sta, deixando de servir mais ao pr√≥ximo"
    ],
    
    "Pecados capitais (ra√≠zes do pecado que geram muitas outras faltas)": [
        "Cedi √† soberba, agindo com orgulho ou querendo ser superior aos outros",
        "Fui avarento, apegado ao dinheiro ou a bens materiais, sem generosidade",
        "Entreguei-me √† lux√∫ria, buscando prazeres impuros nos pensamentos, olhares ou a√ß√µes",
        "Fui invejoso, entristecendo-me com o bem ou sucesso alheio",
        "Alimentei a gula, comendo ou bebendo al√©m do necess√°rio por puro prazer",
        "Fui irado, permitindo que a raiva dominasse minhas palavras ou atitudes",
        "Fui pregui√ßoso, negligente no cumprimento dos meus deveres espirituais ou materiais"
    ]

}


# ‚úÖ Rota principal
@app.route("/", methods=["GET", "POST"])
def index():
    resultado = {}
    html_conteudo = ""
    if request.method == "POST":
        for mandamento, lista in pecados.items():
            indices = request.form.getlist(mandamento)
            selecionados = [lista[int(i)] for i in indices if i.isdigit() and int(i) < len(lista)]
            if selecionados:
                resultado[mandamento] = selecionados

        custom = request.form.get("custom", "").strip()
        if custom:
            resultado.setdefault("Outros pecados digitados", []).append(custom)

        html_conteudo = render_template("pdf_template.html", resultado=resultado)

    return render_template("index.html", pecados=pecados, resultado=resultado, html_conteudo=html_conteudo)

# ‚úÖ Rota de download do PDF
@app.route("/download", methods=["POST"])
def download():
    html_renderizado = request.form.get("html_conteudo", "")
    if not html_renderizado:
        return "Conte√∫do vazio para gerar PDF", 400

    pdf_io = BytesIO()
    html = HTML(string=html_renderizado, base_url=request.base_url)
    html.write_pdf(target=pdf_io)
    pdf_io.seek(0)

    return Response(pdf_io.read(),
                    mimetype="application/pdf",
                    headers={"Content-Disposition": "attachment;filename=meus_pecados.pdf"})

# ‚úÖ Rota de ora√ß√µes
@app.route("/oracoes")
def oracoes():
    oracoes_lista = [
        {
            "id": 1,
            "titulo": "Ato de Contri√ß√£o",
            "texto": (
                "Meu Deus, arrependo-me de todo o cora√ß√£o de Vos ter ofendido, "
                "porque sois infinitamente bom e digno de ser amado sobre todas as coisas. "
                "Proponho firmemente, com o aux√≠lio da vossa gra√ßa, emendar-me e evitar as ocasi√µes de pecado. "
                "Senhor, pela paix√£o de Jesus Cristo, tende piedade de mim. Am√©m."
            ),
            "descricao": "Expressa arrependimento sincero e desejo de mudan√ßa."
        },
        {
            "id": 2,
            "titulo": "Ora√ß√£o do Arrependimento",
            "texto": (
                "Meu Jesus, por serdes t√£o bom, e por me amardes tanto, vos agrade√ßo por me terdes esperado at√© agora e n√£o terdes permitido que eu morresse em pecado. "
                "Pe√ßo-vos, por vossa paix√£o e morte na cruz, perdoai-me todos os meus pecados e fazei-me verdadeiramente penitente..."
            ),
            "descricao": "Para momentos de reflex√£o e convers√£o interior."
        },
        {
            "id": 3,
            "titulo": "Confiss√£o Geral",
            "texto": (
                "Senhor meu Deus, reconhe√ßo diante de V√≥s que pequei muitas vezes por pensamentos, palavras, atos e omiss√µes. "
                "Arrependo-me sinceramente de todas as minhas faltas e ofensas, especialmente daquelas que mais feriram o vosso amor. "
                "Com humildade, suplico a vossa miseric√≥rdia e, como o filho pr√≥digo, digo: Pai, pequei contra o C√©u e contra V√≥s. "
                "N√£o sou digno de ser chamado vosso filho. Tende piedade de mim, Senhor. Am√©m."
            ),
            "descricao": "Ideal para prepara√ß√£o antes da confiss√£o sacramental."
        },
        {
            "id": 4,
            "titulo": "Miserere Mei Deus",
            "texto": (
                "Tende piedade de mim, √≥ Deus, segundo a vossa miseric√≥rdia; "
                "segundo a grandeza da vossa compaix√£o, apagai a minha culpa. "
                "Lavai-me totalmente da minha iniquidade, e purificai-me do meu pecado. "
                "Criai em mim, √≥ Deus, um cora√ß√£o puro e renovai em meu peito um esp√≠rito firme."
            ),
            "descricao": "Um dos salmos penitenciais mais conhecidos da tradi√ß√£o crist√£."
        },
        {
            "id": 5,
            "titulo": "Do Profundo",
            "texto": (
                "Das profundezas clamo a V√≥s, Senhor. Senhor, escutai a minha voz! "
                "Estejam atentos os vossos ouvidos √†s s√∫plicas da minha prece. "
                "Se levardes em conta nossas faltas, Senhor, quem poder√° subsistir? "
                "Mas em V√≥s se encontra o perd√£o, e por isso Vos teme com rever√™ncia."
            ),
            "descricao": "Uma poderosa express√£o de esperan√ßa na miseric√≥rdia divina."
        },
        {
            "id": 6,
            "titulo": "Salmo 6",
            "texto": (
                "Senhor, n√£o me repreendais em vossa ira, nem me castigueis no vosso furor. "
                "Tende piedade de mim, Senhor, pois desfale√ßo; curai-me, Senhor, pois meus ossos tremem. "
                "A minha alma est√° profundamente perturbada... Salvai-me por causa da vossa miseric√≥rdia!"
            ),
            "descricao": "Suplica o perd√£o e a cura espiritual e f√≠sica."
        },
        {
            "id": 7,
            "titulo": "Ora√ß√£o √† Virgem Maria",
            "texto": (
                "√ì Maria Sant√≠ssima, M√£e de Deus e minha M√£e, refugio-me sob a vossa prote√ß√£o maternal. "
                "V√≥s que sois a Medianeira de todas as gra√ßas, intercedei por mim junto a vosso Filho Jesus. "
                "Alcan√ßai-me a gra√ßa do verdadeiro arrependimento, uma boa confiss√£o e a perseveran√ßa no bem. "
                "Acompanhai-me em todos os momentos da vida, sobretudo na hora da morte. Am√©m."
            ),
            "descricao": "Pe√ßa a intercess√£o de Nossa Senhora ap√≥s o exame de consci√™ncia."
        }
    ]
    return render_template("oracoes.html", oracoes=oracoes_lista)


@app.route("/liturgia")
def liturgia():
    import re
    from datetime import datetime
    import requests

    data_param = request.args.get("data")

    FALLBACK_LITURGIA = {
        "data": "16/07/2025",
        "liturgia": "Bem-aventurada Virgem Maria do Monte Carmelo, Festa",
        "cor": "Branco",
        "antifonas": {
            "entrada": "Todos v√≥s que a Deus temeis, vinde escutar..."
        },
        "oracoes": {
            "coleta": "Senhor, n√≥s vos pedimos: venha em nosso aux√≠lio...",
            "oferendas": "Acolhei, Senhor, as ora√ß√µes e oferendas dos vossos fi√©is...",
            "comunhao": "Senhor, v√≥s nos fizestes participantes dos frutos da reden√ß√£o eterna..."
        },
        "leituras": {
            "primeiraLeitura": [{
                "referencia": "Zc 2, 14-17",
                "titulo": "Leitura da Profecia de Zacarias",
                "texto": "Rejubila, alegra-te, cidade de Si√£o..."
            }],
            "salmo": [{
                "referencia": "Lc 1, 46-55",
                "refrao": "O Poderoso fez por mim maravilhas, e Santo √© o seu nome.",
                "texto": "A minh‚Äôalma engrandece ao Senhor..."
            }],
            "evangelho": [{
                "referencia": "Mt 12, 46-50",
                "titulo": "Proclama√ß√£o do Evangelho de Jesus Cristo ‚ú† segundo Mateus",
                "texto": "Enquanto Jesus estava falando √†s multid√µes..."
            }]
        },
        "antifonas": {
            "comunhao": "Desde agora as gera√ß√µes h√£o de chamar-me de bendita..."
        }
    }

    # Processa data
    try:
        if data_param:
            data_obj = datetime.strptime(data_param, "%Y-%m-%d")
        else:
            data_obj = datetime.today()

        dia = f"{data_obj.day:02d}"
        mes = f"{data_obj.month:02d}"
        ano = f"{data_obj.year}"
        url = f"https://liturgia.up.railway.app/v2/?dia={dia}&mes={mes}&ano={ano}"
    except Exception as e:
        print(f"[ERRO] Falha ao processar data. Usando fallback. Detalhe: {e}")
        url = None

    # Busca API
    try:
        if url:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            dados_api = response.json()
        else:
            raise Exception("URL inv√°lida")
    except Exception as e:
        print(f"[AVISO] API falhou: {e}. Usando fallback.")
        dados_api = FALLBACK_LITURGIA

    # Formata√ß√£o das leituras
    primeira_leitura = ""
    leituras = dados_api.get("leituras", {})
    primeira_leitura_lista = leituras.get("primeiraLeitura", [])
    if primeira_leitura_lista:
        pl = primeira_leitura_lista[0]
        primeira_leitura = f"<strong>{pl.get('referencia','')}</strong> ‚Äì {pl.get('titulo','')}<br>{pl.get('texto','')}"

    salmo_obj = leituras.get("salmo", [{}])[0]
    salmo_referencia = salmo_obj.get("referencia", "")
    salmo_refrao = salmo_obj.get("refrao", "")
    salmo_texto = salmo_obj.get("texto", "")

    evangelho = ""
    evangelho_lista = leituras.get("evangelho", [])
    if evangelho_lista:
        ev = evangelho_lista[0]
        evangelho = f"<strong>{ev.get('referencia','')}</strong> ‚Äì {ev.get('titulo','')}<br>{ev.get('texto','')}"

    # Oracoes
    oracoes = dados_api.get("oracoes", {})
    coleta = oracoes.get("coleta", "")
    oferendas = oracoes.get("oferendas", "")
    comunhao = oracoes.get("comunhao", "")

    # Antifonas
    antifonas = dados_api.get("antifonas", {})
    antifona_entrada = antifonas.get("entrada", "")
    antifona_comunhao = antifonas.get("comunhao", "")

    # Data para exibi√ß√£o
    data_exibicao = dados_api.get("data", data_param or datetime.today().strftime("%d/%m/%Y"))

    # T√≠tulo e cor
    titulo = dados_api.get("liturgia", "Liturgia do Dia")
    cor = dados_api.get("cor", "Cor n√£o informada")

    # Selecionar salmos do dia para √°udio (usando padr√£o parecido com antes)
    salmos_do_dia = []
    import re

    if salmo_referencia:
        numero_match = re.search(r'\b(\d+)\b', salmo_referencia)
        numero = numero_match.group(1) if numero_match else None

        if numero:
            for s in SALMOS:
                if f"salmo_{numero}" in s['filename'].lower():
                    salmos_do_dia.append(s)
        if "Dn 3" in salmo_referencia:
            for s in SALMOS:
                if "dn_3.mp3" == s['filename'].lower():
                    salmos_do_dia.append(s)
                    break
        if "Is 12" in salmo_referencia:
            for s in SALMOS:
                if "isaias12.mp3" == s['filename'].lower():
                    salmos_do_dia.append(s)
                    break
    salmos_do_dia.sort(key=lambda x: x['filename'])

    return render_template(
        "liturgia.html",
        titulo=titulo,
        cor=cor,
        data=data_exibicao,
        oracao_dia=coleta,
        oferendas=oferendas,
        comunhao=comunhao,
        antifona_entrada=antifona_entrada,
        antifona_comunhao=antifona_comunhao,
        primeira_leitura=primeira_leitura,
        salmo={
            "referencia": salmo_referencia,
            "refrao": salmo_refrao,
            "texto": salmo_texto
        },
        evangelho=evangelho,
        salmos_do_dia=salmos_do_dia,
        api_falhou=(dados_api == FALLBACK_LITURGIA),
        formatar_nome_salmo=formatar_nome_salmo,
    )




@app.route("/terco")
def terco():
    mist√©rios = {
        "Gozosos": [
            "1. A Anuncia√ß√£o do Anjo a Maria",
            "2. A Visita√ß√£o de Maria a Isabel",
            "3. O Nascimento de Jesus em Bel√©m",
            "4. A Apresenta√ß√£o do Menino Jesus no Templo",
            "5. O Encontro do Menino Jesus no Templo"
        ],
        "Dolorosos": [
            "1. Jesus agoniza no Horto",
            "2. Jesus √© a√ßoitado",
            "3. Jesus √© coroado de espinhos",
            "4. Jesus carrega a Cruz",
            "5. Jesus √© crucificado"
        ],
        "Gloriosos": [
            "1. Ressurrei√ß√£o de Jesus",
            "2. Ascens√£o de Jesus",
            "3. Descida do Esp√≠rito Santo",
            "4. Assun√ß√£o de Maria",
            "5. Coroa√ß√£o de Maria"
        ],
        "Luminosos": [
            "1. Batismo de Jesus no Jord√£o",
            "2. Auto-revela√ß√£o de Jesus em Can√°",
            "3. An√∫ncio do Reino de Deus",
            "4. Transfigura√ß√£o de Jesus",
            "5. Institui√ß√£o da Eucaristia"
        ]
    }

    oracoes = {
        "Sinal da Cruz": "Em nome do Pai, e do Filho e do Esp√≠rito Santo. Am√©m.",
        "Oferecimento": "Divino Jesus, n√≥s vos oferecemos este ter√ßo que vamos rezar, meditando nos mist√©rios da nossa reden√ß√£o. Concedei-nos, pela intercess√£o da Virgem Maria, M√£e de Deus e nossa M√£e, as virtudes que nos s√£o necess√°rias para bem rez√°-lo e a gra√ßa de ganharmos as indulg√™ncias desta santa devo√ß√£o.",
        "Ora√ß√£o do Anjo": "O Anjo do Senhor anunciou a Maria. E ela concebeu do Esp√≠rito Santo. Ave Maria... Eis aqui a serva do Senhor. Fa√ßa-se em mim segundo a Vossa palavra. Ave Maria... E o Verbo de Deus se fez carne. E habitou entre n√≥s. Ave Maria... Rogai por n√≥s, Santa M√£e de Deus. Para que sejamos dignos das promessas de Cristo.",
        "Credo": "Creio em Deus Pai todo-poderoso, criador do c√©u e da terra... (completo)",
        "Mist√©rios": {
            "Segunda": "Gozosos",
            "Ter√ßa": "Dolorosos",
            "Quarta": "Gloriosos",
            "Quinta": "Luminosos",
            "Sexta": "Dolorosos",
            "S√°bado": "Gozosos",
            "Domingo": "Gloriosos"
        },
        "Final": {
            "Salve": "Salve, Rainha, M√£e de miseric√≥rdia, vida, do√ßura e esperan√ßa nossa, salve! A v√≥s bradamos, os degredados filhos de Eva...",
            "Ladainha": "Senhor, tende piedade de n√≥s... Cristo, tende piedade de n√≥s... Senhor, tende piedade de n√≥s..."
        }
    }

    return render_template("terco.html", mist√©rios=mist√©rios, oracoes=oracoes)


# ‚úÖ Execu√ß√£o da aplica√ß√£o
@app.context_processor
def utility_processor():
    return dict(formatar_nome_salmo=formatar_nome_salmo)
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
